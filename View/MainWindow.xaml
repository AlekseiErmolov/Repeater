<Window x:Class="Repeater.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Repeater"
        xmlns:vm="clr-namespace:Repeater.ViewModel"
        xmlns:helpers="clr-namespace:Repeater.Classes.Helpers"
        mc:Ignorable="d"
        AllowsTransparency="True"
        Title="Repeater" Height="450" Width="650" Style="{DynamicResource MetroWindowStyle}">
    
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <DataTemplate x:Key="MetroListBoxItemTemplate">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="40"/>
                    <ColumnDefinition Width="150"/>
                </Grid.ColumnDefinitions>
                
                <Path Data="{Binding Image}" Stretch="Uniform" Width="28" Height="28" 
                    Fill="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem, Mode=FindAncestor}, Path=Foreground}" />
                <StackPanel Grid.Column="1" Margin="5">
                    <TextBox 
                        Text="{Binding Path=Title, FallbackValue=Title}" 
                        FontFamily="Segoe UI Light" 
                        FontSize="20" 
                        FontWeight="Bold"
                        BorderThickness="0"
                        IsEnabled="{Binding IsEditableTitle}"
                        Background="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem, Mode=FindAncestor}, Path=Background}"
                        Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem, Mode=FindAncestor}, Path=Foreground}" />
                </StackPanel>
            </Grid>
        </DataTemplate>
        <Style x:Key="ScrollBarLineButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Canvas Height="18">
                            <Polygon Fill="Black" Points="3,15 15,15 9,3"></Polygon>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarLineButtonBottomStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Canvas Height="18">
                            <Polygon Fill="Black" Points="3,3 9,15 15,3"></Polygon>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border BorderBrush="Transparent"></Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Margin" Value="1,0,1,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Rectangle Fill="Black" Margin="2"></Rectangle>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonFocusVisual">
            <Setter
            Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MetroButton" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
            <Setter Property="Background" Value="#EEEEEEEE"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="10 5"/>
            <Setter Property="FontSize" Value="14" />
            <Setter Property="BorderThickness" Value="2" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />

                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="OpacityMask" Value="#AA888888"/>
                                <Setter Property="Margin" Value="2 1" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderThickness" Value="0"/>
                                <!--<Setter Property="Background" Value="DimGray"/>-->
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MetroListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Padding" Value="4,1"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsSelected" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="#FFB9B9B9"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{x:Null}"/>
                                <Setter Property="Foreground" Value="Black" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="False"/>
                                    <Condition Property="IsSelected" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{x:Null}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{x:Null}"/>
                                <Setter Property="Foreground" Value="Black" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="#FF0072C6"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{x:Null}"/>
                                <Setter Property="Foreground" Value="White"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MetroWindowStyle" TargetType="{x:Type Window}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="WindowStyle" Value="None" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <Grid>
                            <Border x:Name="MainBorder" BorderThickness="0" Background="White" >
                                <DockPanel LastChildFill="True">
                                    <Border x:Name="PART_TITLEBAR" 
                                            Margin="0,0,0,0" Height="40" DockPanel.Dock="Top"  
                                            Background="Transparent" MouseLeftButtonDown="Window_MouseLeftButtonDown">
                                        <DockPanel LastChildFill="False">
                                            <TextBlock Margin="4,0,0,4" VerticalAlignment="Center" 
                                                       Foreground="#FFAAAAAA" TextWrapping="NoWrap" 
                                                       Text="{TemplateBinding Title}" FontSize="16" />
                                            <Button x:Name="PART_CLOSE" DockPanel.Dock="Right" 
                                                    VerticalAlignment="Center" Margin="5"
                                                    Height="20" Width="20" 
                                                    Style="{DynamicResource MetroWindowButtonStyle}"
                                                    Click="close_program">
                                                <Path Data="F1M54.0573,47.8776L38.1771,31.9974 54.0547,16.1198C55.7604,14.4141 55.7604,11.6511 54.0573,9.94531 52.3516,8.23962 49.5859,8.23962 47.8802,9.94531L32.0026,25.8229 16.1224,9.94531C14.4167,8.23962 11.6511,8.23962 9.94794,9.94531 8.24219,11.6511 8.24219,14.4141 9.94794,16.1198L25.8255,32 9.94794,47.8776C8.24219,49.5834 8.24219,52.3477 9.94794,54.0534 11.6511,55.7572 14.4167,55.7585 16.1224,54.0534L32.0026,38.1745 47.8802,54.0534C49.5859,55.7585 52.3516,55.7572 54.0573,54.0534 55.7604,52.3477 55.763,49.5834 54.0573,47.8776z" 
                                                      Stretch="Uniform" Fill="#FFAAAAAA" Width="10" Margin="0,0,0,0" ></Path>
                                            </Button>
                                            <Button x:Name="PART_MAXIMIZE_RESTORE" 
                                                    DockPanel.Dock="Right" Margin="5"
                                                    HorizontalAlignment="Center" VerticalAlignment="Center" 
                                                    Height="20" Width="20" Style="{DynamicResource MetroWindowButtonStyle}"
                                                    Click="maximize_program">
                                                <Path Data="M4.3685131,23.127279L4.3685131,47.283243 47.117023,47.283243 47.117023,23.127279z M0,10.684L53.755001,10.684 53.755001,51.668001 0,51.668001z M8.5679998,0L58.668022,0 64,0 64,5.6864691 64,45.317999 58.668022,45.317999 58.668022,5.6864691 8.5679998,5.6864691z"
                                                      Stretch="Uniform" Fill="#FFAAAAAA" Width="10" Margin="0,0,0,0" ></Path>
                                            </Button>
                                            <Button x:Name="PART_MINIMIZE" 
                                                    HorizontalAlignment="Center" 
                                                    VerticalAlignment="Center" Margin="5"
                                                    DockPanel.Dock="Right"
                                                    Height="20" Width="20" Style="{DynamicResource MetroWindowButtonStyle}"
                                                    Click="minimize_program" VerticalContentAlignment="Bottom">
                                                <Button.Content>
                                                    <Path Data="M0,20L53.333,20 53.333,8.888 0,8.888z" 
                                                          Stretch="Uniform" Fill="#FFAAAAAA" Width="10" Margin="0,0,0,5"></Path>
                                                </Button.Content>
                                            </Button>
                                        </DockPanel>
                                    </Border>

                                    <AdornerDecorator DockPanel.Dock="Bottom">
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                    </AdornerDecorator>
                                </DockPanel>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Window}">
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                    <Grid>
                                        <AdornerDecorator>
                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                        </AdornerDecorator>
                                        <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="False" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                            <Condition Property="WindowState" Value="Normal"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="MetroWindowButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="BorderBrush" Value="#FF707070"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="DiscreteCheckBoxStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
            <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Border>
                            <Grid>
                                <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="{TemplateBinding Padding}"  />
                                <Border>
                                    <Border.Background>
                                        <VisualBrush Opacity="1.0" Stretch="None">
                                            <VisualBrush.Visual>
                                                <Path Name="path" Opacity="0.3" Data="M 0 5 L 3 10 10 0" Stroke="#FF3838BA" StrokeThickness="1.5"
                                    StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" />
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </Border.Background>
                                </Border>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="path" Property="Opacity" Value="1.0" />
                                <Setter TargetName="path" Property="Stroke" Value="#FF70A16F" />
                                <Setter TargetName="path" Property="StrokeThickness" Value="2.5" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ProgressCorrect" TargetType="{x:Type ProgressBar}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ProgressBar">
                        <Border BorderBrush="{Binding MenuColor}" BorderThickness="1" Background="{Binding ProgressColor}" CornerRadius="0" Padding="0">
                            <Grid x:Name="PART_Track">
                                <Rectangle x:Name="PART_Indicator" HorizontalAlignment="Left" Fill="{Binding ProgressStatusColor}"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ProgressUncorrect" TargetType="{x:Type ProgressBar}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ProgressBar">
                        <Border BorderBrush="{Binding MenuColor}" BorderThickness="1" Background="{Binding ProgressColor}" CornerRadius="0" Padding="0">
                            <Grid x:Name="PART_Track">
                                <Rectangle x:Name="PART_Indicator" HorizontalAlignment="Left" Fill="Red" />
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <BitmapImage x:Key="One" UriSource="../Media/1.png" />
        <BitmapImage x:Key="MenuImage" UriSource="../Media/menu.png" />
        <BitmapImage x:Key="SaveImage" UriSource="../Media/save.png" />
        <BitmapImage x:Key="NewCardImage" UriSource="../Media/newCard.png" />
        <BitmapImage x:Key="SaveAndNewImage" UriSource="../Media/saveAndNew.png" />
        <BitmapImage x:Key="Repeat" UriSource="../Media/repeat_t.png" />

        <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="18"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition MaxHeight="18"/>
                </Grid.RowDefinitions>

                <RepeatButton Grid.Row="0" Height="18"
                          Style="{StaticResource ScrollBarLineButtonStyle}"
                          Command="ScrollBar.LineUpCommand" >
                </RepeatButton>
                <Track Name="PART_Track" Grid.Row="1" 
                   IsDirectionReversed="True">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButtonStyle}">
                        </RepeatButton>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumbStyle}">
                        </Thumb>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButtonStyle}">
                        </RepeatButton>
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton Grid.Row="3" Height="18"
                          Style="{StaticResource ScrollBarLineButtonBottomStyle}"
                          Command="ScrollBar.LineDownCommand">
                </RepeatButton>
            </Grid>
        </ControlTemplate>

        <Style TargetType="{x:Type ScrollBar}">
            <Setter Property="Template" Value="{StaticResource VerticalScrollBar}"/>
        </Style>

    </Window.Resources>

    <Grid Background="{Binding TextColor}">
        <Grid.RowDefinitions>
            <RowDefinition Height="24"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0" Grid.Row="0" Background="{Binding TitleColor}">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                <Menu Background="{Binding TitleColor}" FontFamily="Segoe UI Light" FontSize="16">
                    <MenuItem>
                        <MenuItem.Header>
                            <StackPanel>
                                <Image Width="20" Height="20" Source="{StaticResource MenuImage}" />
                            </StackPanel>
                        </MenuItem.Header>
                        <MenuItem 
                            Header="Invert" 
                            IsCheckable="true"
                            IsChecked="{Binding InvertTask, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnSourceUpdated=True}"/>
                        <MenuItem
                            Command="{Binding NewLessonCommand}"
                            Header="New Lesson">
                            <MenuItem.Icon>
                                <Image Source="{StaticResource One}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem 
                            Command="{Binding ViewLessonInfo}"
                            Header="View Info">
                            <MenuItem.Icon>
                                <Image Source="{StaticResource SaveAndNewImage}" />
                            </MenuItem.Icon>
                        </MenuItem>
                    </MenuItem>
                </Menu>

                <StackPanel Orientation="Vertical">
                    <Rectangle Width="10" Height="10" Margin="0,1,0,0">
                        <Rectangle.Fill>
                            <SolidColorBrush Color="Cyan"/>
                        </Rectangle.Fill>
                        <Rectangle.InputBindings>
                            <MouseBinding Command="{Binding CyanThemeCommand}" Gesture="LeftClick"/>
                        </Rectangle.InputBindings>
                    </Rectangle>

                    <Rectangle Width="10" Height="10" Margin="0,2,0,0">
                        <Rectangle.Fill>
                            <SolidColorBrush Color="Gray"/>
                        </Rectangle.Fill>
                        <Rectangle.InputBindings>
                            <MouseBinding Command="{Binding GrayThemeCommand}" Gesture="LeftClick"/>
                        </Rectangle.InputBindings>
                    </Rectangle>
                </StackPanel>

                <StackPanel Orientation="Vertical">
                    <Rectangle Width="10" Height="10" Margin="2,1,0,0">
                        <Rectangle.Fill>
                            <SolidColorBrush Color="Green"/>
                        </Rectangle.Fill>
                        <Rectangle.InputBindings>
                            <MouseBinding Command="{Binding GreenThemeCommand}" Gesture="LeftClick"/>
                        </Rectangle.InputBindings>
                    </Rectangle>
                    <Rectangle Width="10" Height="10" Margin="2,2,0,0">
                        <Rectangle.Fill>
                            <SolidColorBrush Color="Blue"/>
                        </Rectangle.Fill>
                        <Rectangle.InputBindings>
                            <MouseBinding Command="{Binding BlueThemeCommand}" Gesture="LeftClick"/>
                        </Rectangle.InputBindings>
                    </Rectangle>
                </StackPanel>

                <TextBox 
                    Text="{Binding NewLessonName, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnSourceUpdated=True}"
                    Visibility="{Binding IsEnableToEnterFileName, Converter={StaticResource BooleanToVisibilityConverter}}" 
                    MinWidth="120"
                    FontFamily="Segoe UI Light" 
                    FontSize="14" >
                    <TextBox.InputBindings>
                        <KeyBinding Command="{Binding CreateNewLessonFileCommand}" Key="Enter"></KeyBinding>
                    </TextBox.InputBindings>
                </TextBox>
                
            </StackPanel>
            
            <Label 
                FontFamily="Segoe UI" 
                FontSize="14" 
                FontWeight="Bold"
                VerticalAlignment="Center" 
                Margin="0,-15" 
                Content="{Binding CardsCountString}"
                HorizontalAlignment="Right"/>
        </Grid>

        <Grid Grid.Column="1" Grid.Row="0" Background="{Binding TitleColor}">
        </Grid>

        <Grid Grid.Column="2" Grid.Row="0" Background="{Binding TitleColor}"/>

        <GridSplitter 
                HorizontalAlignment="Right" 
                VerticalAlignment="Stretch" 
                Grid.Column="1"
                Grid.Row="1"
                ResizeBehavior="PreviousAndNext"
                Width="5" 
                Background="{Binding MenuColor}"/>

        <Grid Grid.Column="2" Grid.Row="0" Background="{Binding TitleColor}">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <ProgressBar 
                Style="{StaticResource ProgressCorrect}"
                Grid.Row="0" 
                Margin="2,0,4,0" 
                Value="{Binding CorrectAnswerCnt}"
                Maximum="{Binding CardsCount}">
            </ProgressBar>

            <ProgressBar 
                Style="{StaticResource ProgressUncorrect}"
                Grid.Row="1" 
                Margin="2,0,4,0" 
                Value="{Binding IncorrectAnswerCnt}"
                Maximum="{Binding CardsCount}">
                <ProgressBar.LayoutTransform>
                    <RotateTransform Angle="180"/>
                </ProgressBar.LayoutTransform>
            </ProgressBar>
        </Grid>

        <Grid Background="{Binding MenuColor}" Grid.Row="1" Grid.Column="0">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>

                <Grid.Resources>
                    <helpers:BindingProxy x:Key="Proxy" Data="{Binding}" />
                </Grid.Resources>

                <ListBox 
                    Grid.Row="0"
                    DataContext="{Binding Menu}"
                    Margin="2,2,7,7"
                    Background="{x:Null}"
                    BorderBrush="{x:Null}" 
                    ItemTemplate="{DynamicResource MetroListBoxItemTemplate}" 
                    ItemContainerStyle="{DynamicResource MetroListBoxItemStyle}"
                    ItemsSource="{Binding Menu}"
                    SelectedItem="{Binding MenuSelected, Mode=TwoWay,NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged}">
                    <ListBox.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Rename" Command="{Binding Source={StaticResource Proxy}, Path=Data.RenameLessonCommand}"/>
                        </ContextMenu>
                    </ListBox.ContextMenu>
                </ListBox>
                <Button 
                    Margin="10,0,0,0"
                    BorderThickness="0px"
                    FontWeight="Bold"
                    MinHeight="30px"
                    Grid.Row="1"
                    Background="{Binding MenuColor}" 
                    HorizontalAlignment="Stretch"
                    Command="{Binding AddHardLesson}"
                    >Add to Hard</Button>
            </Grid>
        </Grid>

        <Grid 
            Grid.Column="2" 
            Grid.Row="1"
            Background="{Binding TitleColor}" 
            Panel.ZIndex="2" 
            Visibility="{Binding IsRepeat, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <StackPanel 
                Grid.Column="1" 
                Grid.Row="1" 
                Background="{Binding TitleColor}">
                <Label FontFamily="Segoe UI Light" FontSize="30" Content="Repeat?" >
                    <Label.InputBindings>
                        <KeyBinding Command="{Binding RepeatCommand}" Key="Enter"/>
                        <MouseBinding Command="{Binding RepeatCommand}" Gesture="LeftClick"/>
                    </Label.InputBindings>
                </Label>
            </StackPanel>
        </Grid>

        <Grid Grid.Column="2" Grid.Row="1" Background="{Binding MenuColor}" Panel.ZIndex="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <TextBox
                TextWrapping="Wrap"
                AcceptsReturn="True"
                IsEnabled="{Binding IsEnableMakeCard}" 
                FontSize="20"
                FontWeight="Bold"
                Background="{Binding TextColor}"
                Grid.Row="0" 
                Height="auto" 
                Margin="2,2,5,0"
                Text="{Binding ForeignTask, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnSourceUpdated=True,NotifyOnTargetUpdated=True}">
                <TextBox.Effect>
                    <DropShadowEffect ShadowDepth="5" Color="#37474F" Opacity=".4" RenderingBias="Performance"/>
                </TextBox.Effect>
            </TextBox>

            <TextBox
                TextWrapping="Wrap"
                AcceptsReturn="True"
                IsEnabled="{Binding IsEnableMakeCard}"
                FontFamily="Segoe UI Light" FontSize="20"
                Background="{Binding TextColor}"
                Grid.Row="1" 
                Height="auto" 
                Margin="2,10,5,0"
                Text="{Binding Comment, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnSourceUpdated=True,NotifyOnTargetUpdated=True}">
                <TextBox.Effect>
                    <DropShadowEffect ShadowDepth="5" Color="#37474F" Opacity=".4" RenderingBias="Performance"/>
                </TextBox.Effect>
            </TextBox>

            <TextBox 
                TextWrapping="Wrap"
                AcceptsReturn="True"
                FontFamily="Segoe UI Light" FontSize="20"
                Background="{Binding TextColor}"
                Margin="2,10,5,0"
                Grid.Row="2" 
                Height="auto"
                Text="{Binding UserText,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnSourceUpdated=True,NotifyOnTargetUpdated=True}"
                Foreground="{Binding Forecolor,Mode=TwoWay}">
                <TextBox.InputBindings>
                    <KeyBinding Command="{Binding EnterCommand}" Key="Enter"></KeyBinding>
                </TextBox.InputBindings>
                <TextBox.Effect>
                    <DropShadowEffect ShadowDepth="5" Color="#37474F" Opacity=".4" RenderingBias="Performance"/>
                </TextBox.Effect>
            </TextBox>

            <TextBox 
                TextWrapping="Wrap"
                AcceptsReturn="True"
                IsEnabled="{Binding IsEnableMakeCard}" 
                FontSize="20"
                FontWeight="Bold"
                Background="{Binding TextColor}"
                Grid.Row="3" 
                Height="auto" 
                Margin="2,10,5,5"
                Text="{Binding NativeTask, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnSourceUpdated=True,NotifyOnTargetUpdated=True}">
                <TextBox.Effect>
                    <DropShadowEffect ShadowDepth="5" Color="#37474F" Opacity=".4" RenderingBias="Performance"/>
                </TextBox.Effect>
            </TextBox>

        </Grid>

    </Grid>
</Window>
